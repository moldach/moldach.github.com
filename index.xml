<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew J. Oldach on Matthew J. Oldach</title>
    <link>/</link>
    <description>Recent content in Matthew J. Oldach on Matthew J. Oldach</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Step aside Cron, this is a job for .Rprofile &amp; logfiles!</title>
      <link>/post/rprofile/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/rprofile/</guid>
      <description>

&lt;p&gt;Just as &lt;a href=&#34;https://github.com/r-lib/testthat&#34; target=&#34;_blank&#34;&gt;test automation&lt;/a&gt; is a critical part of &lt;a href=&#34;http://users.atw.hu/sustainsoftdev/ch05lev1sec2.html&#34; target=&#34;_blank&#34;&gt;rutheless testing&lt;/a&gt;, your goal for any project should be to identify taks that can be automated (and do it!).&lt;/p&gt;

&lt;p&gt;There are a number of packages that allow you to schedule R scripts at specific times; two that come to mind are &lt;a href=&#34;https://cran.r-project.org/package=taskscheduleR&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;taskscheduleR&lt;/code&gt;&lt;/a&gt; (for Windows) and &lt;a href=&#34;https://cran.r-project.org/package=cronR&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cronR&lt;/code&gt;&lt;/a&gt; (for Unix/Linux). We have &lt;code&gt;cronR&lt;/code&gt; setup on RStudio server at work, and it has a nice &lt;em&gt;RStudio addin&lt;/em&gt; which allows us to schedule tasks around any complex schedule. You can use these kind of tools &lt;a href=&#34;http://www.r-datacollection.com/blog/Welcome-to-the-ADCR-Blog/&#34; target=&#34;_blank&#34;&gt;to automate data collections&lt;/a&gt;, &lt;a href=&#34;http://www.r-datacollection.com/blog/Welcome-to-the-ADCR-Blog/&#34; target=&#34;_blank&#34;&gt;automate markdown reports to e-mail&lt;/a&gt;, &lt;a href=&#34;http://www.r-datacollection.com/blog/Welcome-to-the-ADCR-Blog/&#34; target=&#34;_blank&#34;&gt;or even the weather&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, when you want a function (or script) to launch every time you start &lt;code&gt;R&lt;/code&gt; you can place these inside &lt;code&gt;.Rprofile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what about if you want a function to start only the first time a user logs in? This could be something simple (like a reminder) to fill in a progress report, or in this case a bit of &lt;em&gt;Monday Morning (de)Motivation&lt;/em&gt;. This is a job for logfiles!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s be straight here, I love Mondays (because &lt;a href=&#34;https://rweekly.org/&#34; target=&#34;_blank&#34;&gt;rweekly&lt;/a&gt; is released!), but most people don&amp;rsquo;t! Therefore, I made a &lt;code&gt;.csv&lt;/code&gt; file of &lt;code&gt;178&lt;/code&gt; quotes about Monday and a folder of 83 &lt;code&gt;.png&lt;/code&gt; images of cartoon characters sleeping. I used the &lt;code&gt;.First()&lt;/code&gt; function in &lt;code&gt;.Rprofile&lt;/code&gt; to create a logfile (if one doesn&amp;rsquo;t already exist) and randomly pair an image with a quote the first time a user logs in on Monday morning (using the &lt;code&gt;advicegiveR&lt;/code&gt; package).
Here&amp;rsquo;s some examples of images a user might see first thing Monday morning:&lt;/p&gt;

&lt;h3 id=&#34;the-good&#34;&gt;The Good&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;fig1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-bad&#34;&gt;The Bad&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;fig2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-ugly&#34;&gt;The Ugly&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;fig3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Any other time of that day (or any other day of the week) it will simply call a sage piece of collected advice from the &lt;code&gt;R-help&lt;/code&gt; forum via the &lt;code&gt;fortunes&lt;/code&gt; package. An example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;R will always be arcane to those who do not make a serious effort to learn it. It is &lt;strong&gt;not&lt;/strong&gt; meant to be
intuitive and easy for casual users to just plunge into. It is far too complex and powerful for that. But
the rewards are great for serious data analysts who put in the effort.
   &amp;ndash; Berton Gunter
      R-help (August 2007)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You need to create a folder in your home directory that contains a &lt;code&gt;quotes.csv&lt;/code&gt;, a &lt;code&gt;LogFile.txt&lt;/code&gt; and &lt;code&gt;images&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;.First &amp;lt;- function(){
        today &amp;lt;- as.Date(Sys.Date())
        LastLog &amp;lt;- &amp;quot;&amp;quot;
        if(file.exists(&amp;quot;~/iHateMondays/LogFile.txt&amp;quot;)) {
                LogFile &amp;lt;- file(&amp;quot;~/iHateMondays/LogFile.txt&amp;quot;, open=&amp;quot;r&amp;quot;)
                LastLog &amp;lt;- readLines(LogFile, 1L)
                close(LogFile)
        }
        LogFile &amp;lt;- file(&amp;quot;~/iHateMondays/LogFile.txt&amp;quot;, open=&amp;quot;w&amp;quot;)
        writeLines(as.character(today), LogFile)
        close(LogFile)
        
        if(LastLog == as.character(today)) {
                # Already logged on today, just exit
                return()
        }
        
        ## If you get here, Need to run the first login code
        DOW &amp;lt;- weekdays(today)
        if (DOW == &amp;quot;Monday&amp;quot;) {
                # I Hate Mondays!
                suppressWarnings(library(advicegiveR, warn.conflicts = FALSE))
                suppressWarnings(library(readr, warn.conflicts = FALSE))
                quotes &amp;lt;- read_csv(&amp;quot;~/iHateMondays/quotes.csv&amp;quot;, col_names = FALSE)
                x1 &amp;lt;- sample(1:nrow(quotes), 1)
                advice &amp;lt;- as.character(quotes[x1,])
                y &amp;lt;- list.files(&amp;quot;~/iHateMondays/images&amp;quot;)
                # select one randomly
                y1 &amp;lt;- sample(1:length(y), 1)
                image &amp;lt;- magick::image_read(paste0(&amp;quot;~/iHateMondays/images&amp;quot;, y[y1]))
                # print image
                advicegiveR::print_advice(image = image, advice = advice, textcolor = &amp;quot;yellow&amp;quot;, size = 40)
        } else {
                # Fortune
                suppressWarnings(library(fortunes, warn.conflicts = FALSE))
                rnum &amp;lt;- sample(1:386, 1)
                print(fortune(rnum))
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Ideally, you should use a contrasting border around the inner text color to make it readable on any background.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;fig4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/leeper/meme&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;meme&lt;/code&gt; R package&lt;/a&gt; package uses a black border around text and positions text like a typical meme (top &amp;amp; bottom).&lt;/p&gt;

&lt;p&gt;By including a simple helper function to split the quote into equal lengthed top/bottom sections, the code would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;suppressWarnings(library(tidyverse))
word_split &amp;lt;- function(x, side=&amp;quot;left&amp;quot;, sep=&amp;quot; &amp;quot;) {
  words &amp;lt;- strsplit(as.character(x), sep)
  nwords &amp;lt;- lengths(words)
  if(side==&amp;quot;left&amp;quot;) {
    start &amp;lt;- 1
    end &amp;lt;- ceiling(nwords/2)
  } else if (side==&amp;quot;right&amp;quot;) {
    start &amp;lt;- ceiling((nwords+2)/2)
    end &amp;lt;- nwords
  }
  cw &amp;lt;- function(words, start, stop) paste(words[start:stop], collapse=sep)
  pmap_chr(list(words, start, end), cw)
}
left_words &amp;lt;- function(..., side) word_split(..., side=&amp;quot;left&amp;quot;)
right_words &amp;lt;- function(..., side) word_split(..., side=&amp;quot;right&amp;quot;)

.First &amp;lt;- function(){
        today &amp;lt;- as.Date(Sys.Date())
        LastLog &amp;lt;- &amp;quot;&amp;quot;
        if(file.exists(&amp;quot;~/iHateMondays/LogFile.txt&amp;quot;)) {
                LogFile &amp;lt;- file(&amp;quot;~/iHateMondays/LogFile.txt&amp;quot;, open=&amp;quot;r&amp;quot;)
                LastLog &amp;lt;- readLines(LogFile, 1L)
                close(LogFile)
        }
        LogFile &amp;lt;- file(&amp;quot;~/iHateMondays/LogFile.txt&amp;quot;, open=&amp;quot;w&amp;quot;)
        writeLines(as.character(today), LogFile)
        close(LogFile)

        if(LastLog == as.character(today)) {
                # Already logged on today, just exit
                return()
        }

        ## If you get here, Need to run the first login code
        DOW &amp;lt;- weekdays(today)
        if (DOW == &amp;quot;Monday&amp;quot;) {
                # I Hate Mondays!
                suppressWarnings(library(readr, warn.conflicts = FALSE))
                suppressWarnings(library(meme, warn.conflicts = FALSE))
                quotes &amp;lt;- read_csv(&amp;quot;~/iHateMondays/quotes.csv&amp;quot;, col_names = FALSE)
                x1 &amp;lt;- sample(1:nrow(quotes), 1)
                advice &amp;lt;- as.character(quotes[x1,])
                top_words &amp;lt;- left_words(advice)
                bottom_words &amp;lt;- right_words(advice)
                y &amp;lt;- list.files(&amp;quot;~/iHateMondays/images&amp;quot;)
                # select one randomly
                y1 &amp;lt;- sample(1:length(y), 1)
                image &amp;lt;- magick::image_read(paste0(&amp;quot;~/iHateMondays/images/&amp;quot;, y[y1]))
                # print image
                meme(paste0(&amp;quot;~/iHateMondays/images/&amp;quot;, y[y1]), size = &amp;quot;1.5&amp;quot;, upper = top_words, lower = bottom_words, color = &amp;quot;yellow&amp;quot;, font = &amp;quot;Times&amp;quot;)

        } else {
                # Fortune
                suppressWarnings(library(fortunes, warn.conflicts = FALSE))
                rnum &amp;lt;- sample(1:386, 1)
                print(fortune(rnum))
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;fig5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Image-grid with Ninjutsu CSS theme in Xaringan</title>
      <link>/post/ninjutsu/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/ninjutsu/</guid>
      <description>&lt;p&gt;A graduate student in our laboratory recently asked me if it was possible to include more than two images, side-by-side, in &lt;code&gt;Xaringan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course anything is possible, however, most blog posts only touch on the most basic things you can do. With custom &lt;code&gt;CSS&lt;/code&gt; you can do whatever you want. I wanted to create an image-grid of a bunch of GIFs so I used the &lt;code&gt;ninjutsu&lt;/code&gt; theme to accomplish it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/4EFfHjHbgUnhzeZtg0/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://moldach.github.io/xaringan-presentation_ninjutsu/&#34; target=&#34;_blank&#34;&gt;Link to the slide-show&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Drake in R</title>
      <link>/post/drake/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/drake/</guid>
      <description>&lt;p&gt;Recently I got interested in using the &lt;code&gt;xaringan&lt;/code&gt; package for creating HTML based R Markdown documents because I could use the &lt;code&gt;widgetframe&lt;/code&gt; package to embed &lt;code&gt;htmlwidgets&lt;/code&gt; as responsive iframes (I had created some spinning 3D visulizations with pseudo-coloring I wanted to present interactively).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xaringan&lt;/code&gt;, it&amp;rsquo;s a &lt;code&gt;R&lt;/code&gt; pacakges for creating slideshows with &lt;a href=&#34;http://remarkjs.com/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;remark.js&lt;/code&gt;&lt;/a&gt; through R Markdown.&lt;/p&gt;

&lt;p&gt;Around the same time I learnt about &lt;a href=&#34;https://github.com/ropensci/drake&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Drake&lt;/code&gt;&lt;/a&gt; (or &amp;ldquo;Data Frames in R for Make&amp;rdquo;) which is an amazing a time-saving reproducible build system for data scientist specifically tailored to &lt;code&gt;R&lt;/code&gt;. The pacakge makes use of the &lt;code&gt;futures&lt;/code&gt; package allowing the use of parallel computing on high-performance computing systems.&lt;/p&gt;

&lt;p&gt;I recently gave a talk at the Douglas Mental Health University Institute talking about the advantages of Drake (and a few other interesting projects).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3fhu1Pm9kYB5RgDtn7/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The slides can be found &lt;a href=&#34;https://moldach.github.io/xaringan-presentation_drake/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Scraping Google Sheets with RSelenium</title>
      <link>/project/rselenium/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 -0500</pubDate>
      
      <guid>/project/rselenium/</guid>
      <description></description>
    </item>
    
    <item>
      <title>10 Tips for Choosing the Optimal Number of Clusters</title>
      <link>/project/optimal-clustering/</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 -0500</pubDate>
      
      <guid>/project/optimal-clustering/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Gamification of Fitbit: How An API Provided The Next Level of tRaining</title>
      <link>/project/fitbit-project/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>/project/fitbit-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Highlight 3D Brain Regions</title>
      <link>/project/3d-brain/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/project/3d-brain/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Transcriptome Assembly and Annotation</title>
      <link>/project/assembly/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/project/assembly/</guid>
      <description></description>
    </item>
    
    <item>
      <title>vapoRwave ggplot2 themes &amp; palettes</title>
      <link>/project/vaporwave/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/project/vaporwave/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Choose the Best Open Source Software</title>
      <link>/project/software-solutions/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/project/software-solutions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Reversing the order of axis in a ggplot2 scatterplot</title>
      <link>/project/reverse-axis/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/project/reverse-axis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Gold Standard for Data Science Project Management</title>
      <link>/project/project-management/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/project/project-management/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 -0400</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recreating data visualizations from the book Knowledge is Beautiful</title>
      <link>/project/knowledge-is-beautiful/</link>
      <pubDate>Wed, 06 Jun 2018 00:00:00 -0400</pubDate>
      
      <guid>/project/knowledge-is-beautiful/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Analyzing 12 years of the Free Ride World Tour</title>
      <link>/project/free-ride-world-tour/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 -0400</pubDate>
      
      <guid>/project/free-ride-world-tour/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
